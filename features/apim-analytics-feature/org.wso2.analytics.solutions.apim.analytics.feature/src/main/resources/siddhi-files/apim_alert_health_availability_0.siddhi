/*
    Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

@App:name("apim_alert_health_availability_0")
@App:description("Determines the availablity and health of an api")

define trigger LoadInMemoryTable at 'start';
define trigger PeriodicTrigger at every 5 minutes;

@source(type = 'inMemory' , topic = 'APIM_REQUEST')
define stream Request (meta_clientType string, applicationConsumerKey string, applicationName string, applicationId string, applicationOwner string, apiContext string, apiName string, apiVersion string, apiResourcePath string, apiResourceTemplate string, apiMethod string, apiCreator string, apiCreatorTenantDomain string, apiTier string, apiHostname string, username string, userTenantDomain string, userIp string, userAgent string, requestTimestamp long, throttledOut bool, responseTime long, serviceTime long, backendTime long, responseCacheHit bool, responseSize long, protocol string, responseCode int, destination string, securityLatency long, throttlingLatency long, requestMedLat long, responseMedLat long, backendLatency long, otherLatency long, gatewayType string, label string);

define stream SuppressedResponseTimeAlertStream(apiName string, apiVersion string, apiContext string, apiCreator string, apiCreatorTenantDomain string, thresholdResponseTime long);

define stream SuppressedResponseCodeAlertStream(apiName string, apiVersion string, apiContext string, apiCreator string, apiCreatorTenantDomain string);

@sink(type = 'inMemory', topic = 'ApimApiHealthMonitorAlertStream')
define stream ApiHealthMonitorAlertStream(apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, message string, severity int, alertTimestamp long);

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
@PrimaryKey('apiName', 'apiVersion', 'apiCreator', 'apiCreatorTenantDomain')
define table ApiCreatorAlertConfiguration (apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, thresholdResponseTime long, thresholdBackendTime long);

@PrimaryKey('apiName', 'apiVersion', 'apiCreator', 'apiCreatorTenantDomain')
define table ApiCreatorAlertConfigurationInMemoryTable (apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, thresholdResponseTime long);

@info(name = 'creatorConfigurationInfoRetrievQuery')
from Request as R join ApiCreatorAlertConfigurationInMemoryTable as C
 	on(R.apiName == C.apiName and R.apiVersion == C.apiVersion and R.apiCreator == C.apiCreator and R.apiCreatorTenantDomain == C.apiCreatorTenantDomain )
select R.apiContext, R.apiName, R.apiVersion, R.apiResourceTemplate, R.apiMethod, R.apiCreator, R.apiCreatorTenantDomain, R.requestTimestamp, R.responseTime, R.backendTime, C.thresholdResponseTime, R.responseCode
insert into RequestAlertInfoStream;

partition with (apiContext of RequestAlertInfoStream)
begin
 -- checks whether the response time is higher than the threshold response time continuously for 5 times
 	@info(name = 'Abnormal response time pattern check')
 	from every e1 = RequestAlertInfoStream[thresholdResponseTime >0 and responseTime > thresholdResponseTime],e2 = RequestAlertInfoStream[thresholdResponseTime >0 and responseTime > thresholdResponseTime],e3 = RequestAlertInfoStream[thresholdResponseTime >0 and responseTime > thresholdResponseTime], e4 = RequestAlertInfoStream[thresholdResponseTime >0 and responseTime > thresholdResponseTime],e5 = RequestAlertInfoStream[thresholdResponseTime >0 and responseTime > thresholdResponseTime]
 	select e1.apiName, e1.apiVersion, e1.apiContext, e1.apiCreator, e1.apiCreatorTenantDomain, e1.thresholdResponseTime
 	insert into ResponseTimeAlertStream;
end;

partition with (apiContext of Request)
begin

 --checks whether the response code is between 500 - 600 to identify a server error
 	@info(name = 'Abnormal response code pattern check')
 	from every e1 = Request[responseCode >= 500 and responseCode < 600],e2 = Request[responseCode >= 500 and responseCode < 600],e3 = Request[responseCode >= 500 and responseCode < 600], e4 = Request[responseCode >= 500 and responseCode < 600],e5 = Request[responseCode >= 500 and responseCode < 600]
 	select e1.apiName, e1.apiVersion, e1.apiContext, e1.apiCreator, e1.apiCreatorTenantDomain
 	insert into ResponseCodeAlertStream;
end;

@info(name = 'ResponseTime Alert Suppression')
from ResponseTimeAlertStream#window.length(1) as a left outer join SuppressedResponseTimeAlertStream#window.time(10 minutes) as b
 	on a.apiName == b.apiName and a.apiVersion == b.apiVersion and a.apiCreator == b.apiCreator and a.apiCreatorTenantDomain == b.apiCreatorTenantDomain
select a.apiName, a.apiVersion, a.apiContext, a.apiCreator, a.apiCreatorTenantDomain, a.thresholdResponseTime
 	having b.apiName is null
insert into SuppressedResponseTimeAlertStream;

@info(name = 'ResponseCode Alert Suppression')
from ResponseCodeAlertStream#window.length(1) as a left outer join SuppressedResponseCodeAlertStream#window.time(10 minutes) as b
 	on a.apiName == b.apiName and a.apiVersion == b.apiVersion and a.apiCreator == b.apiCreator and a.apiCreatorTenantDomain == b.apiCreatorTenantDomain
select a.apiName, a.apiVersion, a.apiContext, a.apiCreator, a.apiCreatorTenantDomain
 	having b.apiName is null
insert into SuppressedResponseCodeAlertStream;

@info(name = 'Query generates ApiHealthMonitorAlertStreamTemp with message for high response time alert')
from SuppressedResponseTimeAlertStream
select apiName, apiVersion, ifThenElse(apiCreatorTenantDomain == 'carbon.super', str:concat(apiCreator, "@carbon.super"), apiCreator) as apiCreator, apiCreatorTenantDomain, str:concat('Response time is higher than ' , convert(thresholdResponseTime, 'string'), ' ms continuously for 5 or more responses.') as message, 2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into ApiHealthMonitorAlertStream;

@info(name = 'Query generates ApiHealthMonitorAlertStreamTemp with message for server error alert')
from SuppressedResponseCodeAlertStream
select apiName, apiVersion, ifThenElse(apiCreatorTenantDomain == 'carbon.super', str:concat(apiCreator, "@carbon.super"), apiCreator) as apiCreator, apiCreatorTenantDomain, 'Server error occurred continuously for 5 or more times.' as message, 2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into ApiHealthMonitorAlertStream;

@info(name='Update IntermediateStream') 
from LoadInMemoryTable 
select triggered_time 
insert into InMemoryTableJoinStream;

@info(name='Update IntermediateStream periodically') 
from PeriodicTrigger  
select triggered_time 
insert into InMemoryTableJoinStream;

-- Update the AlertCreatorConfig Table @ start
@info(name = 'Load ApiCreatorAlertConfigurationInMemoryTable')
from InMemoryTableJoinStream join ApiCreatorAlertConfiguration
select apiName, apiVersion, apiCreator, apiCreatorTenantDomain, thresholdResponseTime
update or
insert into ApiCreatorAlertConfigurationInMemoryTable
set ApiCreatorAlertConfiguration.thresholdResponseTime = thresholdResponseTime
 	on ApiCreatorAlertConfigurationInMemoryTable.apiName == apiName and ApiCreatorAlertConfigurationInMemoryTable.apiVersion == apiVersion and ApiCreatorAlertConfigurationInMemoryTable.apiCreator == apiCreator and ApiCreatorAlertConfigurationInMemoryTable.apiCreatorTenantDomain == apiCreatorTenantDomain;

